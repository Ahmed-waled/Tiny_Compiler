Token Text -> Token Type
int -> INT
sum -> ID
( -> LPAR
int -> INT
a -> ID
, -> COMMA
int -> INT
b -> ID
) -> RPAR
{ -> LCURL
return -> RETURN
a -> ID
+ -> PLUS
b -> ID
; -> SCOLON
} -> RCURL
int -> INT
main -> MAIN
( -> LPAR
) -> RPAR
{ -> LCURL
int -> INT
val -> ID
, -> COMMA
counter -> ID
; -> SCOLON
read -> READ
val -> ID
; -> SCOLON
counter -> ID
:= -> ASSIGN
0 -> INTEGER
; -> SCOLON
repeat -> REPEAT
val -> ID
:= -> ASSIGN
val -> ID
- -> MINUS
1 -> INTEGER
; -> SCOLON
write -> WRITE
"Iteration number [" -> STR
; -> SCOLON
write -> WRITE
counter -> ID
; -> SCOLON
write -> WRITE
"] the value of x = " -> STR
; -> SCOLON
write -> WRITE
val -> ID
; -> SCOLON
write -> WRITE
endl -> ENDL
; -> SCOLON
counter -> ID
:= -> ASSIGN
counter -> ID
+ -> PLUS
1 -> INTEGER
; -> SCOLON
until -> UNTIL
val -> ID
= -> EQ
1 -> INTEGER
write -> WRITE
endl -> ENDL
; -> SCOLON
string -> STRING
s -> ID
:= -> ASSIGN
"number of Iterations = " -> STR
; -> SCOLON
write -> WRITE
s -> ID
; -> SCOLON
counter -> ID
:= -> ASSIGN
counter -> ID
- -> MINUS
1 -> INTEGER
; -> SCOLON
write -> WRITE
counter -> ID
; -> SCOLON
float -> FLOAT
z1 -> ID
:= -> ASSIGN
3 -> INTEGER
* -> MUL
2 -> INTEGER
* -> MUL
( -> LPAR
2 -> INTEGER
+ -> PLUS
1 -> INTEGER
) -> RPAR
/ -> DIV
2 -> INTEGER
- -> MINUS
5.3 -> REALNUMBER
z1 -> ID
:= -> ASSIGN
z1 -> ID
+ -> PLUS
sum -> ID
( -> LPAR
a -> ID
, -> COMMA
y -> ID
) -> RPAR
; -> SCOLON
if -> IF
z1 -> ID
> -> GT
5 -> INTEGER
|| -> OR
z1 -> ID
< -> LT
counter -> ID
&& -> AND
z1 -> ID
= -> EQ
1 -> INTEGER
then -> THEN
write -> WRITE
z1 -> ID
; -> SCOLON
elseif -> ELIF
z1 -> ID
< -> LT
5 -> INTEGER
then -> THEN
z1 -> ID
:= -> ASSIGN
5 -> INTEGER
; -> SCOLON
else -> ELSE
z1 -> ID
:= -> ASSIGN
counter -> ID
; -> SCOLON
end -> END
return -> RETURN
0 -> INTEGER
; -> SCOLON
} -> RCURL
